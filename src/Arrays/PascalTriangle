/*
Given numRows, generate the first numRows of Pascal’s triangle.

Pascal’s triangle : To generate A[C] in row R, sum up A’[C] and A’[C-1] from previous row R - 1.

Example:

Given numRows = 5,

Return

[
     [1],
     [1,1],
     [1,2,1],
     [1,3,3,1],
     [1,4,6,4,1]
]*/

public class Solution {
    public ArrayList<ArrayList<Integer>> solve(int A) {
        
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(A == 0)
        return result;

        int curr_row = 1, curr_column = 1;

        ArrayList<Integer> temp1 = new ArrayList<>() ;
        temp1.add(1);
        result.add(temp1);

        ArrayList<Integer> temp;
        while(curr_row < A){
            temp = new ArrayList<Integer>();
            temp.add(1);

            while(curr_column < curr_row){
                temp.add(result.get(curr_row-1).get(curr_column) + result.get(curr_row-1).get(curr_column-1));
                curr_column++;
            }
            temp.add(1);
            curr_column = 1;
            result.add(temp);
            curr_row++;
        }
        return result;
    }
}

Editorial Solution
public ArrayList<ArrayList<Integer>> solve(int A) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        
        for(int i = 0; i < A; i++){
            ArrayList <Integer> ar = new ArrayList<>();
            
            for(int j = 0; j <= i; j++){
                if(j == 0 || j == i){
                    ar.add(1);
                } else {
                    ar.add(ans.get(i - 1).get(j) + ans.get(i - 1).get(j - 1));
                }
            }
            ans.add(ar);
        }
        return ans;
    }
