/*
Find longest Arithmetic Progression in an integer array A of size N, and return its length.

More formally, find longest sequence of indices, 0 < i1 < i2 < … < ik < ArraySize(0-indexed) such that sequence A[i1], A[i2], …, A[ik] is an Arithmetic Progression.

Arithmetic Progression is a sequence in which all the differences between consecutive pairs are the same, i.e sequence B[0], B[1], B[2], …, B[m - 1] of length m is an Arithmetic Progression if and only if B[1] - B[0] == B[2] - B[1] == B[3] - B[2] == … == B[m - 1] - B[m - 2]

Note: The common difference can be positive, negative or 0.
*/

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int solve(final List<Integer> A) {
        
        int ans = 2;
        int n = A.size();
        if(n <= 2)
            return n;
            
        int[] dp = new int[n];
        int[] Acopy = new int[n];
        for(int i = 0; i < n; i++){
            dp[i] = 2;
            Acopy[i] = A.get(i);
        }
        
        Arrays.sort(Acopy);
        
        for(int j = n-2; j >= 0; j--){
            
            int i = j-1;
            int k = j+1;
            while(i >= 0 && k < n){
                if(Acopy[i]+Acopy[k] == 2*Acopy[j]){
                    dp[j] = Math.max(dp[k]+1, dp[j]);
                    ans = Math.max(ans, dp[j]);
                    i = i-1;
                    k = k+1;
                } else if(Acopy[i]+Acopy[k] < 2*Acopy[j]){
                    k = k+1;
                } else {
                    i = i-1;
                }
            }
        }
        return ans;
    }
}
