public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int longestSubsequenceLength(final List<Integer> A) {
        
        List<Integer> lis_dp = LIS(A);
        List<Integer> reverseA = reverseList(A);
        List<Integer> lds_dp = LIS(reverseA);
        Collections.reverse(lds_dp);
        
        
        int max = 0;
        for(int i = 0; i < A.size(); i++){
            int val = lis_dp.get(i)+lds_dp.get(i)-1;
            if(max < val)
            max = val;
        }
        
        return max;
        
    }
    
    private List<Integer> reverseList(List<Integer> A){
        
        List<Integer> result = new ArrayList<>();
        for(int i = A.size()-1; i >=0 ;i--){
            result.add(A.get(i));
        }
        return result;
    }
    
    private List<Integer> LIS(List<Integer> A){
        
        List<Integer> dp = new ArrayList<>();
        int n = A.size();
        for(int i = 0; i < n; i++){
            dp.add(1);
        }
        
        for(int i = 1; i < n; i++){
            for(int j = 0; j < i; j ++){
                if(A.get(i) > A.get(j) && dp.get(i) < dp.get(j) + 1)
                    dp.set(i, dp.get(j)+1); 
            }
        }
        return dp;
    }
}
